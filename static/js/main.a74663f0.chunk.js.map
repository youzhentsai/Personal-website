{"version":3,"sources":["IMG_6234.JPG","About.js","Home.js","Work.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","className","align","React","Component","Home","Work","App","src","selfpic","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,sC,0RCc5BC,E,iLAXP,OACA,yBAAKC,UAAY,gBAAgBC,MAAQ,UACzC,uBAAGD,UAAY,eAAf,mBACI,uBAAGA,UAAY,iBAAf,8FAC4F,KAD5F,gHAE8G,KAF9G,8F,GALQE,IAAMC,WCWXC,E,iLATP,OACI,yBAAKJ,UAAY,gBACb,uBAAGA,UAAY,cAAf,kCAAwD,KAAxD,KACA,uBAAGA,UAAY,gBAAf,oE,GALGE,IAAMC,WCWVE,E,iLATP,OACI,yBAAKL,UAAY,gBACb,uBAAGA,UAAY,cAAf,oBAA8C,KAA9C,KACA,uBAAGA,UAAY,gBAAf,wP,GALGE,IAAMC,WCkCVG,MAxBf,WACE,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAIhB,kBAAE,EAAF,MACA,yBAAKO,IAAKC,IAASR,UAAU,YAAYS,IAAI,UAC7C,kBAAE,EAAF,MACA,kBAAE,EAAF,SCTYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a74663f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMG_6234.eabb208c.JPG\";","import React from  'react';\nclass About extends React.Component{\n    render(){\n        return (\n        <div className = 'About-section' align = 'center'> \n        <p className = 'About-title'> MORE ABOUT ME </p>\n            <p className = 'About-content'> \n            BACKGROUND: I was born and raised in Taipei, Taiwan, and I came to the states for college. {'\\n'}\n            ACTIVITIES: I am a software developer at Codebase, working on data science projects at Data Science Society. {'\\n'}\n            HOBBIES: In my free time, I love to travel, go shopping and try out new restaurants! </p>\n        </div>)\n    }\n}\n\nexport default About","import React from  'react';\nclass Home extends React.Component{\n    render(){\n        return(\n            <div className = 'Home-section' >\n                <p className = 'Home-title' > Hello! Iâ€™m Kelly Tsai :) {'\\n'} </p>\n                <p className = 'Home-content' > I am a freshman at UC Berkeley studying computer science. </p>\n            </div>\n        ) \n    }\n}\n\nexport default Home","import React from  'react';\nclass Work extends React.Component{\n    render(){\n        return(\n            <div className = 'Work-section'>\n                <p className = 'Work-title'> WHAT I AM DOING {'\\n'} </p>\n                <p className = 'Work-content'> Working with EthiCAL, a student run social enterprise that designs and sells ethically-made clothing, as full stack web developer in a team of six people building an all-in-one web portal that manages sales, inventory, and communication. </p>\n            </div>\n        ) \n    }\n}\n\nexport default Work","import React from 'react';\n// import logo from './logo.svg';\nimport './Home.css';\nimport './About.css';\nimport './Work.css';\nimport './App.css'\nimport selfpic from './IMG_6234.JPG';\nimport About from './About.js'\nimport Home from './Home.js'\nimport Work from './Work.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p> */}\n        < Home />\n        <img src={selfpic} className=\"App-image\" alt=\"image\"/>\n        < About />\n        < Work />\n        {/* <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}